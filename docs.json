{
	"id": 0,
	"name": "shandler",
	"kind": 1,
	"kindString": "Project",
	"flags": {},
	"originalName": "",
	"children": [
		{
			"id": 112,
			"name": "types",
			"kind": 4,
			"kindString": "Namespace",
			"flags": {},
			"children": [
				{
					"id": 113,
					"name": "ISHClient",
					"kind": 256,
					"kindString": "Interface",
					"flags": {},
					"comment": {},
					"children": [
						{
							"id": 114,
							"name": "typescript",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"sources": [
								{
									"fileName": "typings.d.ts",
									"line": 5,
									"character": 2
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "boolean"
							}
						}
					],
					"groups": [
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								114
							]
						}
					],
					"sources": [
						{
							"fileName": "typings.d.ts",
							"line": 4,
							"character": 17
						}
					],
					"implementedBy": [
						{
							"type": "reference",
							"id": 1,
							"name": "SHClient"
						}
					]
				},
				{
					"id": 115,
					"name": "ISHClientOptions",
					"kind": 256,
					"kindString": "Interface",
					"flags": {},
					"comment": {
						"tags": [
							{
								"tag": "property",
								"text": "{string} token - The token to be used for authenticating with the discord API."
							},
							{
								"tag": "property",
								"text": "{string[]} commands - The commands to be used for the bot(Absolute paths).\n\n"
							}
						]
					},
					"children": [
						{
							"id": 116,
							"name": "token",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"sources": [
								{
									"fileName": "typings.d.ts",
									"line": 14,
									"character": 2
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						},
						{
							"id": 117,
							"name": "typescript",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isOptional": true
							},
							"sources": [
								{
									"fileName": "typings.d.ts",
									"line": 15,
									"character": 2
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "boolean"
							}
						}
					],
					"groups": [
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								116,
								117
							]
						}
					],
					"sources": [
						{
							"fileName": "typings.d.ts",
							"line": 13,
							"character": 17
						}
					]
				}
			],
			"groups": [
				{
					"title": "Interfaces",
					"kind": 256,
					"children": [
						113,
						115
					]
				}
			],
			"sources": [
				{
					"fileName": "typings.d.ts",
					"line": 4,
					"character": 0
				}
			]
		},
		{
			"id": 1,
			"name": "SHClient",
			"kind": 128,
			"kindString": "Class",
			"flags": {},
			"children": [
				{
					"id": 32,
					"name": "constructor",
					"kind": 512,
					"kindString": "Constructor",
					"flags": {},
					"sources": [
						{
							"fileName": "src/index.ts",
							"line": 20,
							"character": 2
						}
					],
					"signatures": [
						{
							"id": 33,
							"name": "new SHClient",
							"kind": 16384,
							"kindString": "Constructor signature",
							"flags": {},
							"comment": {
								"tags": [
									{
										"tag": "classdesc",
										"text": ""
									},
									{
										"tag": "author",
										"text": "Arnav Mishra"
									},
									{
										"tag": "license",
										"text": "MIT"
									},
									{
										"tag": "version",
										"text": "1.0.0\n"
									},
									{
										"tag": "description",
										"text": "\nThis class is used to create a new instance of Shandler."
									}
								]
							},
							"parameters": [
								{
									"id": 34,
									"name": "options",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"shortText": "The options to be used for creating a new instance of Shandler.\n"
									},
									"type": {
										"type": "reference",
										"id": 115,
										"name": "ISHClientOptions"
									}
								}
							],
							"type": {
								"type": "reference",
								"id": 1,
								"name": "SHClient"
							},
							"overwrites": {
								"type": "reference",
								"name": "EventEmitter.constructor"
							}
						}
					],
					"overwrites": {
						"type": "reference",
						"name": "EventEmitter.constructor"
					}
				},
				{
					"id": 35,
					"name": "#token",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isPrivate": true
					},
					"sources": [
						{
							"fileName": "src/index.ts",
							"line": 6,
							"character": 2
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				},
				{
					"id": 36,
					"name": "typescript",
					"kind": 1024,
					"kindString": "Property",
					"flags": {},
					"sources": [
						{
							"fileName": "src/index.ts",
							"line": 7,
							"character": 2
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "boolean"
					},
					"implementationOf": {
						"type": "reference",
						"id": 114,
						"name": "ISHClient.typescript"
					}
				},
				{
					"id": 29,
					"name": "captureRejectionSymbol",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isStatic": true,
						"isExternal": true,
						"isReadonly": true
					},
					"sources": [
						{
							"fileName": "node_modules/@types/node/events.d.ts",
							"line": 301,
							"character": 24
						}
					],
					"type": {
						"type": "query",
						"queryType": {
							"type": "reference",
							"id": 29,
							"qualifiedName": "EventEmitter.captureRejectionSymbol",
							"package": "@types/node",
							"name": "captureRejectionSymbol"
						}
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "EventEmitter.captureRejectionSymbol"
					}
				},
				{
					"id": 30,
					"name": "captureRejections",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isStatic": true,
						"isExternal": true
					},
					"comment": {
						"shortText": "Sets or gets the default captureRejection value for all emitters."
					},
					"sources": [
						{
							"fileName": "node_modules/@types/node/events.d.ts",
							"line": 306,
							"character": 15
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "boolean"
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "EventEmitter.captureRejections"
					}
				},
				{
					"id": 31,
					"name": "defaultMaxListeners",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isStatic": true,
						"isExternal": true
					},
					"sources": [
						{
							"fileName": "node_modules/@types/node/events.d.ts",
							"line": 307,
							"character": 15
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "number"
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "EventEmitter.defaultMaxListeners"
					}
				},
				{
					"id": 28,
					"name": "errorMonitor",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isStatic": true,
						"isExternal": true,
						"isReadonly": true
					},
					"comment": {
						"shortText": "This symbol shall be used to install a listener for only monitoring `'error'`\nevents. Listeners installed using this symbol are called before the regular\n`'error'` listeners are called.",
						"text": "Installing a listener using this symbol does not change the behavior once an\n`'error'` event is emitted, therefore the process will still crash if no\nregular `'error'` listener is installed.\n"
					},
					"sources": [
						{
							"fileName": "node_modules/@types/node/events.d.ts",
							"line": 300,
							"character": 24
						}
					],
					"type": {
						"type": "query",
						"queryType": {
							"type": "reference",
							"id": 28,
							"qualifiedName": "EventEmitter.errorMonitor",
							"package": "@types/node",
							"name": "errorMonitor"
						}
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "EventEmitter.errorMonitor"
					}
				},
				{
					"id": 40,
					"name": "addListener",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExternal": true
					},
					"signatures": [
						{
							"id": 41,
							"name": "addListener",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {
								"isExternal": true
							},
							"comment": {
								"shortText": "Alias for `emitter.on(eventName, listener)`.",
								"tags": [
									{
										"tag": "since",
										"text": "v0.1.26\n"
									}
								]
							},
							"parameters": [
								{
									"id": 42,
									"name": "eventName",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isExternal": true
									},
									"type": {
										"type": "union",
										"types": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "symbol"
											}
										]
									}
								},
								{
									"id": 43,
									"name": "listener",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isExternal": true
									},
									"type": {
										"type": "reflection",
										"declaration": {
											"id": 44,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {
												"isExternal": true
											},
											"signatures": [
												{
													"id": 45,
													"name": "__type",
													"kind": 4096,
													"kindString": "Call signature",
													"flags": {
														"isExternal": true
													},
													"parameters": [
														{
															"id": 46,
															"name": "args",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {
																"isExternal": true,
																"isRest": true
															},
															"type": {
																"type": "array",
																"elementType": {
																	"type": "intrinsic",
																	"name": "any"
																}
															}
														}
													],
													"type": {
														"type": "intrinsic",
														"name": "void"
													}
												}
											]
										}
									}
								}
							],
							"type": {
								"type": "reference",
								"id": 1,
								"name": "SHClient"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "EventEmitter.addListener"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"name": "EventEmitter.addListener"
					}
				},
				{
					"id": 89,
					"name": "emit",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExternal": true
					},
					"signatures": [
						{
							"id": 90,
							"name": "emit",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {
								"isExternal": true
							},
							"comment": {
								"shortText": "Synchronously calls each of the listeners registered for the event named`eventName`, in the order they were registered, passing the supplied arguments\nto each.",
								"text": "Returns `true` if the event had listeners, `false` otherwise.\n\n```js\nconst EventEmitter = require('events');\nconst myEmitter = new EventEmitter();\n\n// First listener\nmyEmitter.on('event', function firstListener() {\n  console.log('Helloooo! first listener');\n});\n// Second listener\nmyEmitter.on('event', function secondListener(arg1, arg2) {\n  console.log(`event with parameters ${arg1}, ${arg2} in second listener`);\n});\n// Third listener\nmyEmitter.on('event', function thirdListener(...args) {\n  const parameters = args.join(', ');\n  console.log(`event with parameters ${parameters} in third listener`);\n});\n\nconsole.log(myEmitter.listeners('event'));\n\nmyEmitter.emit('event', 1, 2, 3, 4, 5);\n\n// Prints:\n// [\n//   [Function: firstListener],\n//   [Function: secondListener],\n//   [Function: thirdListener]\n// ]\n// Helloooo! first listener\n// event with parameters 1, 2 in second listener\n// event with parameters 1, 2, 3, 4, 5 in third listener\n```",
								"tags": [
									{
										"tag": "since",
										"text": "v0.1.26\n"
									}
								]
							},
							"parameters": [
								{
									"id": 91,
									"name": "eventName",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isExternal": true
									},
									"type": {
										"type": "union",
										"types": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "symbol"
											}
										]
									}
								},
								{
									"id": 92,
									"name": "args",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isExternal": true,
										"isRest": true
									},
									"type": {
										"type": "array",
										"elementType": {
											"type": "intrinsic",
											"name": "any"
										}
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "boolean"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "EventEmitter.emit"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"name": "EventEmitter.emit"
					}
				},
				{
					"id": 110,
					"name": "eventNames",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExternal": true
					},
					"signatures": [
						{
							"id": 111,
							"name": "eventNames",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {
								"isExternal": true
							},
							"comment": {
								"shortText": "Returns an array listing the events for which the emitter has registered\nlisteners. The values in the array are strings or `Symbol`s.",
								"text": "```js\nconst EventEmitter = require('events');\nconst myEE = new EventEmitter();\nmyEE.on('foo', () => {});\nmyEE.on('bar', () => {});\n\nconst sym = Symbol('symbol');\nmyEE.on(sym, () => {});\n\nconsole.log(myEE.eventNames());\n// Prints: [ 'foo', 'bar', Symbol(symbol) ]\n```",
								"tags": [
									{
										"tag": "since",
										"text": "v6.0.0\n"
									}
								]
							},
							"type": {
								"type": "array",
								"elementType": {
									"type": "union",
									"types": [
										{
											"type": "intrinsic",
											"name": "string"
										},
										{
											"type": "intrinsic",
											"name": "symbol"
										}
									]
								}
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "EventEmitter.eventNames"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"name": "EventEmitter.eventNames"
					}
				},
				{
					"id": 81,
					"name": "getMaxListeners",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExternal": true
					},
					"signatures": [
						{
							"id": 82,
							"name": "getMaxListeners",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {
								"isExternal": true
							},
							"comment": {
								"shortText": "Returns the current max listener value for the `EventEmitter` which is either\nset by `emitter.setMaxListeners(n)` or defaults to {@link defaultMaxListeners}.",
								"tags": [
									{
										"tag": "since",
										"text": "v1.0.0\n"
									}
								]
							},
							"type": {
								"type": "intrinsic",
								"name": "number"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "EventEmitter.getMaxListeners"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"name": "EventEmitter.getMaxListeners"
					}
				},
				{
					"id": 93,
					"name": "listenerCount",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExternal": true
					},
					"signatures": [
						{
							"id": 94,
							"name": "listenerCount",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {
								"isExternal": true
							},
							"comment": {
								"shortText": "Returns the number of listeners listening to the event named `eventName`.",
								"tags": [
									{
										"tag": "since",
										"text": "v3.2.0"
									}
								]
							},
							"parameters": [
								{
									"id": 95,
									"name": "eventName",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isExternal": true
									},
									"comment": {
										"shortText": "The name of the event being listened for\n"
									},
									"type": {
										"type": "union",
										"types": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "symbol"
											}
										]
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "number"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "EventEmitter.listenerCount"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"name": "EventEmitter.listenerCount"
					}
				},
				{
					"id": 83,
					"name": "listeners",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExternal": true
					},
					"signatures": [
						{
							"id": 84,
							"name": "listeners",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {
								"isExternal": true
							},
							"comment": {
								"shortText": "Returns a copy of the array of listeners for the event named `eventName`.",
								"text": "```js\nserver.on('connection', (stream) => {\n  console.log('someone connected!');\n});\nconsole.log(util.inspect(server.listeners('connection')));\n// Prints: [ [Function] ]\n```",
								"tags": [
									{
										"tag": "since",
										"text": "v0.1.26\n"
									}
								]
							},
							"parameters": [
								{
									"id": 85,
									"name": "eventName",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isExternal": true
									},
									"type": {
										"type": "union",
										"types": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "symbol"
											}
										]
									}
								}
							],
							"type": {
								"type": "array",
								"elementType": {
									"type": "reference",
									"qualifiedName": "Function",
									"package": "typedoc",
									"name": "Function"
								}
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "EventEmitter.listeners"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"name": "EventEmitter.listeners"
					}
				},
				{
					"id": 68,
					"name": "off",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExternal": true
					},
					"signatures": [
						{
							"id": 69,
							"name": "off",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {
								"isExternal": true
							},
							"comment": {
								"shortText": "Alias for `emitter.removeListener()`.",
								"tags": [
									{
										"tag": "since",
										"text": "v10.0.0\n"
									}
								]
							},
							"parameters": [
								{
									"id": 70,
									"name": "eventName",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isExternal": true
									},
									"type": {
										"type": "union",
										"types": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "symbol"
											}
										]
									}
								},
								{
									"id": 71,
									"name": "listener",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isExternal": true
									},
									"type": {
										"type": "reflection",
										"declaration": {
											"id": 72,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {
												"isExternal": true
											},
											"signatures": [
												{
													"id": 73,
													"name": "__type",
													"kind": 4096,
													"kindString": "Call signature",
													"flags": {
														"isExternal": true
													},
													"parameters": [
														{
															"id": 74,
															"name": "args",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {
																"isExternal": true,
																"isRest": true
															},
															"type": {
																"type": "array",
																"elementType": {
																	"type": "intrinsic",
																	"name": "any"
																}
															}
														}
													],
													"type": {
														"type": "intrinsic",
														"name": "void"
													}
												}
											]
										}
									}
								}
							],
							"type": {
								"type": "reference",
								"id": 1,
								"name": "SHClient"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "EventEmitter.off"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"name": "EventEmitter.off"
					}
				},
				{
					"id": 47,
					"name": "on",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExternal": true
					},
					"signatures": [
						{
							"id": 48,
							"name": "on",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {
								"isExternal": true
							},
							"comment": {
								"shortText": "Adds the `listener` function to the end of the listeners array for the\nevent named `eventName`. No checks are made to see if the `listener` has\nalready been added. Multiple calls passing the same combination of `eventName`and `listener` will result in the `listener` being added, and called, multiple\ntimes.",
								"text": "```js\nserver.on('connection', (stream) => {\n  console.log('someone connected!');\n});\n```\n\nReturns a reference to the `EventEmitter`, so that calls can be chained.\n\nBy default, event listeners are invoked in the order they are added. The`emitter.prependListener()` method can be used as an alternative to add the\nevent listener to the beginning of the listeners array.\n\n```js\nconst myEE = new EventEmitter();\nmyEE.on('foo', () => console.log('a'));\nmyEE.prependListener('foo', () => console.log('b'));\nmyEE.emit('foo');\n// Prints:\n//   b\n//   a\n```",
								"tags": [
									{
										"tag": "since",
										"text": "v0.1.101"
									}
								]
							},
							"parameters": [
								{
									"id": 49,
									"name": "eventName",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isExternal": true
									},
									"comment": {
										"shortText": "The name of the event."
									},
									"type": {
										"type": "union",
										"types": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "symbol"
											}
										]
									}
								},
								{
									"id": 50,
									"name": "listener",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isExternal": true
									},
									"comment": {
										"shortText": "The callback function\n"
									},
									"type": {
										"type": "reflection",
										"declaration": {
											"id": 51,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {
												"isExternal": true
											},
											"signatures": [
												{
													"id": 52,
													"name": "__type",
													"kind": 4096,
													"kindString": "Call signature",
													"flags": {
														"isExternal": true
													},
													"parameters": [
														{
															"id": 53,
															"name": "args",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {
																"isExternal": true,
																"isRest": true
															},
															"type": {
																"type": "array",
																"elementType": {
																	"type": "intrinsic",
																	"name": "any"
																}
															}
														}
													],
													"type": {
														"type": "intrinsic",
														"name": "void"
													}
												}
											]
										}
									}
								}
							],
							"type": {
								"type": "reference",
								"id": 1,
								"name": "SHClient"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "EventEmitter.on"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"name": "EventEmitter.on"
					}
				},
				{
					"id": 54,
					"name": "once",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExternal": true
					},
					"signatures": [
						{
							"id": 55,
							"name": "once",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {
								"isExternal": true
							},
							"comment": {
								"shortText": "Adds a **one-time**`listener` function for the event named `eventName`. The\nnext time `eventName` is triggered, this listener is removed and then invoked.",
								"text": "```js\nserver.once('connection', (stream) => {\n  console.log('Ah, we have our first user!');\n});\n```\n\nReturns a reference to the `EventEmitter`, so that calls can be chained.\n\nBy default, event listeners are invoked in the order they are added. The`emitter.prependOnceListener()` method can be used as an alternative to add the\nevent listener to the beginning of the listeners array.\n\n```js\nconst myEE = new EventEmitter();\nmyEE.once('foo', () => console.log('a'));\nmyEE.prependOnceListener('foo', () => console.log('b'));\nmyEE.emit('foo');\n// Prints:\n//   b\n//   a\n```",
								"tags": [
									{
										"tag": "since",
										"text": "v0.3.0"
									}
								]
							},
							"parameters": [
								{
									"id": 56,
									"name": "eventName",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isExternal": true
									},
									"comment": {
										"shortText": "The name of the event."
									},
									"type": {
										"type": "union",
										"types": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "symbol"
											}
										]
									}
								},
								{
									"id": 57,
									"name": "listener",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isExternal": true
									},
									"comment": {
										"shortText": "The callback function\n"
									},
									"type": {
										"type": "reflection",
										"declaration": {
											"id": 58,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {
												"isExternal": true
											},
											"signatures": [
												{
													"id": 59,
													"name": "__type",
													"kind": 4096,
													"kindString": "Call signature",
													"flags": {
														"isExternal": true
													},
													"parameters": [
														{
															"id": 60,
															"name": "args",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {
																"isExternal": true,
																"isRest": true
															},
															"type": {
																"type": "array",
																"elementType": {
																	"type": "intrinsic",
																	"name": "any"
																}
															}
														}
													],
													"type": {
														"type": "intrinsic",
														"name": "void"
													}
												}
											]
										}
									}
								}
							],
							"type": {
								"type": "reference",
								"id": 1,
								"name": "SHClient"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "EventEmitter.once"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"name": "EventEmitter.once"
					}
				},
				{
					"id": 96,
					"name": "prependListener",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExternal": true
					},
					"signatures": [
						{
							"id": 97,
							"name": "prependListener",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {
								"isExternal": true
							},
							"comment": {
								"shortText": "Adds the `listener` function to the _beginning_ of the listeners array for the\nevent named `eventName`. No checks are made to see if the `listener` has\nalready been added. Multiple calls passing the same combination of `eventName`and `listener` will result in the `listener` being added, and called, multiple\ntimes.",
								"text": "```js\nserver.prependListener('connection', (stream) => {\n  console.log('someone connected!');\n});\n```\n\nReturns a reference to the `EventEmitter`, so that calls can be chained.",
								"tags": [
									{
										"tag": "since",
										"text": "v6.0.0"
									}
								]
							},
							"parameters": [
								{
									"id": 98,
									"name": "eventName",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isExternal": true
									},
									"comment": {
										"shortText": "The name of the event."
									},
									"type": {
										"type": "union",
										"types": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "symbol"
											}
										]
									}
								},
								{
									"id": 99,
									"name": "listener",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isExternal": true
									},
									"comment": {
										"shortText": "The callback function\n"
									},
									"type": {
										"type": "reflection",
										"declaration": {
											"id": 100,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {
												"isExternal": true
											},
											"signatures": [
												{
													"id": 101,
													"name": "__type",
													"kind": 4096,
													"kindString": "Call signature",
													"flags": {
														"isExternal": true
													},
													"parameters": [
														{
															"id": 102,
															"name": "args",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {
																"isExternal": true,
																"isRest": true
															},
															"type": {
																"type": "array",
																"elementType": {
																	"type": "intrinsic",
																	"name": "any"
																}
															}
														}
													],
													"type": {
														"type": "intrinsic",
														"name": "void"
													}
												}
											]
										}
									}
								}
							],
							"type": {
								"type": "reference",
								"id": 1,
								"name": "SHClient"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "EventEmitter.prependListener"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"name": "EventEmitter.prependListener"
					}
				},
				{
					"id": 103,
					"name": "prependOnceListener",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExternal": true
					},
					"signatures": [
						{
							"id": 104,
							"name": "prependOnceListener",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {
								"isExternal": true
							},
							"comment": {
								"shortText": "Adds a **one-time**`listener` function for the event named `eventName` to the_beginning_ of the listeners array. The next time `eventName` is triggered, this\nlistener is removed, and then invoked.",
								"text": "```js\nserver.prependOnceListener('connection', (stream) => {\n  console.log('Ah, we have our first user!');\n});\n```\n\nReturns a reference to the `EventEmitter`, so that calls can be chained.",
								"tags": [
									{
										"tag": "since",
										"text": "v6.0.0"
									}
								]
							},
							"parameters": [
								{
									"id": 105,
									"name": "eventName",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isExternal": true
									},
									"comment": {
										"shortText": "The name of the event."
									},
									"type": {
										"type": "union",
										"types": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "symbol"
											}
										]
									}
								},
								{
									"id": 106,
									"name": "listener",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isExternal": true
									},
									"comment": {
										"shortText": "The callback function\n"
									},
									"type": {
										"type": "reflection",
										"declaration": {
											"id": 107,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {
												"isExternal": true
											},
											"signatures": [
												{
													"id": 108,
													"name": "__type",
													"kind": 4096,
													"kindString": "Call signature",
													"flags": {
														"isExternal": true
													},
													"parameters": [
														{
															"id": 109,
															"name": "args",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {
																"isExternal": true,
																"isRest": true
															},
															"type": {
																"type": "array",
																"elementType": {
																	"type": "intrinsic",
																	"name": "any"
																}
															}
														}
													],
													"type": {
														"type": "intrinsic",
														"name": "void"
													}
												}
											]
										}
									}
								}
							],
							"type": {
								"type": "reference",
								"id": 1,
								"name": "SHClient"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "EventEmitter.prependOnceListener"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"name": "EventEmitter.prependOnceListener"
					}
				},
				{
					"id": 86,
					"name": "rawListeners",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExternal": true
					},
					"signatures": [
						{
							"id": 87,
							"name": "rawListeners",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {
								"isExternal": true
							},
							"comment": {
								"shortText": "Returns a copy of the array of listeners for the event named `eventName`,\nincluding any wrappers (such as those created by `.once()`).",
								"text": "```js\nconst emitter = new EventEmitter();\nemitter.once('log', () => console.log('log once'));\n\n// Returns a new Array with a function `onceWrapper` which has a property\n// `listener` which contains the original listener bound above\nconst listeners = emitter.rawListeners('log');\nconst logFnWrapper = listeners[0];\n\n// Logs \"log once\" to the console and does not unbind the `once` event\nlogFnWrapper.listener();\n\n// Logs \"log once\" to the console and removes the listener\nlogFnWrapper();\n\nemitter.on('log', () => console.log('log persistently'));\n// Will return a new Array with a single function bound by `.on()` above\nconst newListeners = emitter.rawListeners('log');\n\n// Logs \"log persistently\" twice\nnewListeners[0]();\nemitter.emit('log');\n```",
								"tags": [
									{
										"tag": "since",
										"text": "v9.4.0\n"
									}
								]
							},
							"parameters": [
								{
									"id": 88,
									"name": "eventName",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isExternal": true
									},
									"type": {
										"type": "union",
										"types": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "symbol"
											}
										]
									}
								}
							],
							"type": {
								"type": "array",
								"elementType": {
									"type": "reference",
									"qualifiedName": "Function",
									"package": "typedoc",
									"name": "Function"
								}
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "EventEmitter.rawListeners"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"name": "EventEmitter.rawListeners"
					}
				},
				{
					"id": 37,
					"name": "register",
					"kind": 2048,
					"kindString": "Method",
					"flags": {},
					"sources": [
						{
							"fileName": "src/index.ts",
							"line": 34,
							"character": 2
						}
					],
					"signatures": [
						{
							"id": 38,
							"name": "register",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"tags": [
									{
										"tag": "description",
										"text": "\nThis method is used to register the commands globally!"
									},
									{
										"tag": "author",
										"text": "Arnav Mishra\n\n"
									}
								]
							},
							"parameters": [
								{
									"id": 39,
									"name": "commands",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"shortText": "The commands to be used for the bot(Absolute paths)."
									},
									"type": {
										"type": "array",
										"elementType": {
											"type": "intrinsic",
											"name": "string"
										}
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "void"
							}
						}
					]
				},
				{
					"id": 75,
					"name": "removeAllListeners",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExternal": true
					},
					"signatures": [
						{
							"id": 76,
							"name": "removeAllListeners",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {
								"isExternal": true
							},
							"comment": {
								"shortText": "Removes all listeners, or those of the specified `eventName`.",
								"text": "It is bad practice to remove listeners added elsewhere in the code,\nparticularly when the `EventEmitter` instance was created by some other\ncomponent or module (e.g. sockets or file streams).\n\nReturns a reference to the `EventEmitter`, so that calls can be chained.",
								"tags": [
									{
										"tag": "since",
										"text": "v0.1.26\n"
									}
								]
							},
							"parameters": [
								{
									"id": 77,
									"name": "event",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isExternal": true,
										"isOptional": true
									},
									"type": {
										"type": "union",
										"types": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "symbol"
											}
										]
									}
								}
							],
							"type": {
								"type": "reference",
								"id": 1,
								"name": "SHClient"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "EventEmitter.removeAllListeners"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"name": "EventEmitter.removeAllListeners"
					}
				},
				{
					"id": 61,
					"name": "removeListener",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExternal": true
					},
					"signatures": [
						{
							"id": 62,
							"name": "removeListener",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {
								"isExternal": true
							},
							"comment": {
								"shortText": "Removes the specified `listener` from the listener array for the event named`eventName`.",
								"text": "```js\nconst callback = (stream) => {\n  console.log('someone connected!');\n};\nserver.on('connection', callback);\n// ...\nserver.removeListener('connection', callback);\n```\n\n`removeListener()` will remove, at most, one instance of a listener from the\nlistener array. If any single listener has been added multiple times to the\nlistener array for the specified `eventName`, then `removeListener()` must be\ncalled multiple times to remove each instance.\n\nOnce an event is emitted, all listeners attached to it at the\ntime of emitting are called in order. This implies that any`removeListener()` or `removeAllListeners()` calls _after_ emitting and_before_ the last listener finishes execution will\nnot remove them from`emit()` in progress. Subsequent events behave as expected.\n\n```js\nconst myEmitter = new MyEmitter();\n\nconst callbackA = () => {\n  console.log('A');\n  myEmitter.removeListener('event', callbackB);\n};\n\nconst callbackB = () => {\n  console.log('B');\n};\n\nmyEmitter.on('event', callbackA);\n\nmyEmitter.on('event', callbackB);\n\n// callbackA removes listener callbackB but it will still be called.\n// Internal listener array at time of emit [callbackA, callbackB]\nmyEmitter.emit('event');\n// Prints:\n//   A\n//   B\n\n// callbackB is now removed.\n// Internal listener array [callbackA]\nmyEmitter.emit('event');\n// Prints:\n//   A\n```\n\nBecause listeners are managed using an internal array, calling this will\nchange the position indices of any listener registered _after_ the listener\nbeing removed. This will not impact the order in which listeners are called,\nbut it means that any copies of the listener array as returned by\nthe `emitter.listeners()` method will need to be recreated.\n\nWhen a single function has been added as a handler multiple times for a single\nevent (as in the example below), `removeListener()` will remove the most\nrecently added instance. In the example the `once('ping')`listener is removed:\n\n```js\nconst ee = new EventEmitter();\n\nfunction pong() {\n  console.log('pong');\n}\n\nee.on('ping', pong);\nee.once('ping', pong);\nee.removeListener('ping', pong);\n\nee.emit('ping');\nee.emit('ping');\n```\n\nReturns a reference to the `EventEmitter`, so that calls can be chained.",
								"tags": [
									{
										"tag": "since",
										"text": "v0.1.26\n"
									}
								]
							},
							"parameters": [
								{
									"id": 63,
									"name": "eventName",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isExternal": true
									},
									"type": {
										"type": "union",
										"types": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "symbol"
											}
										]
									}
								},
								{
									"id": 64,
									"name": "listener",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isExternal": true
									},
									"type": {
										"type": "reflection",
										"declaration": {
											"id": 65,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {
												"isExternal": true
											},
											"signatures": [
												{
													"id": 66,
													"name": "__type",
													"kind": 4096,
													"kindString": "Call signature",
													"flags": {
														"isExternal": true
													},
													"parameters": [
														{
															"id": 67,
															"name": "args",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {
																"isExternal": true,
																"isRest": true
															},
															"type": {
																"type": "array",
																"elementType": {
																	"type": "intrinsic",
																	"name": "any"
																}
															}
														}
													],
													"type": {
														"type": "intrinsic",
														"name": "void"
													}
												}
											]
										}
									}
								}
							],
							"type": {
								"type": "reference",
								"id": 1,
								"name": "SHClient"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "EventEmitter.removeListener"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"name": "EventEmitter.removeListener"
					}
				},
				{
					"id": 78,
					"name": "setMaxListeners",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExternal": true
					},
					"signatures": [
						{
							"id": 79,
							"name": "setMaxListeners",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {
								"isExternal": true
							},
							"comment": {
								"shortText": "By default `EventEmitter`s will print a warning if more than `10` listeners are\nadded for a particular event. This is a useful default that helps finding\nmemory leaks. The `emitter.setMaxListeners()` method allows the limit to be\nmodified for this specific `EventEmitter` instance. The value can be set to`Infinity` (or `0`) to indicate an unlimited number of listeners.",
								"text": "Returns a reference to the `EventEmitter`, so that calls can be chained.",
								"tags": [
									{
										"tag": "since",
										"text": "v0.3.5\n"
									}
								]
							},
							"parameters": [
								{
									"id": 80,
									"name": "n",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isExternal": true
									},
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								}
							],
							"type": {
								"type": "reference",
								"id": 1,
								"name": "SHClient"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "EventEmitter.setMaxListeners"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"name": "EventEmitter.setMaxListeners"
					}
				},
				{
					"id": 20,
					"name": "getEventListeners",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isStatic": true,
						"isExternal": true
					},
					"sources": [
						{
							"fileName": "node_modules/@types/node/events.d.ts",
							"line": 270,
							"character": 15
						}
					],
					"signatures": [
						{
							"id": 21,
							"name": "getEventListeners",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {
								"isExternal": true
							},
							"comment": {
								"shortText": "Returns a copy of the array of listeners for the event named `eventName`.",
								"text": "For `EventEmitter`s this behaves exactly the same as calling `.listeners` on\nthe emitter.\n\nFor `EventTarget`s this is the only way to get the event listeners for the\nevent target. This is useful for debugging and diagnostic purposes.\n\n```js\nconst { getEventListeners, EventEmitter } = require('events');\n\n{\n  const ee = new EventEmitter();\n  const listener = () => console.log('Events are fun');\n  ee.on('foo', listener);\n  getEventListeners(ee, 'foo'); // [listener]\n}\n{\n  const et = new EventTarget();\n  const listener = () => console.log('Events are fun');\n  et.addEventListener('foo', listener);\n  getEventListeners(et, 'foo'); // [listener]\n}\n```",
								"tags": [
									{
										"tag": "since",
										"text": "v15.2.0, v14.17.0\n"
									}
								]
							},
							"parameters": [
								{
									"id": 22,
									"name": "emitter",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isExternal": true
									},
									"type": {
										"type": "union",
										"types": [
											{
												"type": "reference",
												"qualifiedName": "DOMEventTarget",
												"package": "@types/node",
												"name": "DOMEventTarget"
											},
											{
												"type": "reference",
												"qualifiedName": "global.NodeJS.EventEmitter",
												"package": "@types/node",
												"name": "EventEmitter"
											}
										]
									}
								},
								{
									"id": 23,
									"name": "name",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isExternal": true
									},
									"type": {
										"type": "union",
										"types": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "symbol"
											}
										]
									}
								}
							],
							"type": {
								"type": "array",
								"elementType": {
									"type": "reference",
									"qualifiedName": "Function",
									"package": "typedoc",
									"name": "Function"
								}
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "EventEmitter.getEventListeners"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"name": "EventEmitter.getEventListeners"
					}
				},
				{
					"id": 16,
					"name": "listenerCount",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isStatic": true,
						"isExternal": true
					},
					"sources": [
						{
							"fileName": "node_modules/@types/node/events.d.ts",
							"line": 242,
							"character": 15
						}
					],
					"signatures": [
						{
							"id": 17,
							"name": "listenerCount",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {
								"isExternal": true
							},
							"comment": {
								"shortText": "A class method that returns the number of listeners for the given `eventName`registered on the given `emitter`.",
								"text": "```js\nconst { EventEmitter, listenerCount } = require('events');\nconst myEmitter = new EventEmitter();\nmyEmitter.on('event', () => {});\nmyEmitter.on('event', () => {});\nconsole.log(listenerCount(myEmitter, 'event'));\n// Prints: 2\n```",
								"tags": [
									{
										"tag": "since",
										"text": "v0.9.12"
									},
									{
										"tag": "deprecated",
										"text": "Since v3.2.0 - Use `listenerCount` instead."
									}
								]
							},
							"parameters": [
								{
									"id": 18,
									"name": "emitter",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isExternal": true
									},
									"comment": {
										"shortText": "The emitter to query"
									},
									"type": {
										"type": "reference",
										"qualifiedName": "global.NodeJS.EventEmitter",
										"package": "@types/node",
										"name": "EventEmitter"
									}
								},
								{
									"id": 19,
									"name": "eventName",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isExternal": true
									},
									"comment": {
										"shortText": "The event name\n"
									},
									"type": {
										"type": "union",
										"types": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "symbol"
											}
										]
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "number"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "EventEmitter.listenerCount"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"name": "EventEmitter.listenerCount"
					}
				},
				{
					"id": 11,
					"name": "on",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isStatic": true,
						"isExternal": true
					},
					"sources": [
						{
							"fileName": "node_modules/@types/node/events.d.ts",
							"line": 221,
							"character": 15
						}
					],
					"signatures": [
						{
							"id": 12,
							"name": "on",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {
								"isExternal": true
							},
							"comment": {
								"shortText": "```js\nconst { on, EventEmitter } = require('events');",
								"text": "(async () => {\n  const ee = new EventEmitter();\n\n  // Emit later on\n  process.nextTick(() => {\n    ee.emit('foo', 'bar');\n    ee.emit('foo', 42);\n  });\n\n  for await (const event of on(ee, 'foo')) {\n    // The execution of this inner block is synchronous and it\n    // processes one event at a time (even with await). Do not use\n    // if concurrent execution is required.\n    console.log(event); // prints ['bar'] [42]\n  }\n  // Unreachable here\n})();\n```\n\nReturns an `AsyncIterator` that iterates `eventName` events. It will throw\nif the `EventEmitter` emits `'error'`. It removes all listeners when\nexiting the loop. The `value` returned by each iteration is an array\ncomposed of the emitted event arguments.\n\nAn `AbortSignal` can be used to cancel waiting on events:\n\n```js\nconst { on, EventEmitter } = require('events');\nconst ac = new AbortController();\n\n(async () => {\n  const ee = new EventEmitter();\n\n  // Emit later on\n  process.nextTick(() => {\n    ee.emit('foo', 'bar');\n    ee.emit('foo', 42);\n  });\n\n  for await (const event of on(ee, 'foo', { signal: ac.signal })) {\n    // The execution of this inner block is synchronous and it\n    // processes one event at a time (even with await). Do not use\n    // if concurrent execution is required.\n    console.log(event); // prints ['bar'] [42]\n  }\n  // Unreachable here\n})();\n\nprocess.nextTick(() => ac.abort());\n```",
								"returns": "that iterates `eventName` events emitted by the `emitter`\n",
								"tags": [
									{
										"tag": "since",
										"text": "v13.6.0, v12.16.0"
									}
								]
							},
							"parameters": [
								{
									"id": 13,
									"name": "emitter",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isExternal": true
									},
									"type": {
										"type": "reference",
										"qualifiedName": "global.NodeJS.EventEmitter",
										"package": "@types/node",
										"name": "EventEmitter"
									}
								},
								{
									"id": 14,
									"name": "eventName",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isExternal": true
									},
									"comment": {
										"shortText": "The name of the event being listened for"
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 15,
									"name": "options",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isExternal": true,
										"isOptional": true
									},
									"type": {
										"type": "reference",
										"qualifiedName": "StaticEventEmitterOptions",
										"package": "@types/node",
										"name": "StaticEventEmitterOptions"
									}
								}
							],
							"type": {
								"type": "reference",
								"typeArguments": [
									{
										"type": "intrinsic",
										"name": "any"
									}
								],
								"qualifiedName": "AsyncIterableIterator",
								"package": "typedoc",
								"name": "AsyncIterableIterator"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "EventEmitter.on"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"name": "EventEmitter.on"
					}
				},
				{
					"id": 2,
					"name": "once",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isStatic": true,
						"isExternal": true
					},
					"sources": [
						{
							"fileName": "node_modules/@types/node/events.d.ts",
							"line": 157,
							"character": 15
						}
					],
					"signatures": [
						{
							"id": 3,
							"name": "once",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {
								"isExternal": true
							},
							"comment": {
								"shortText": "Creates a `Promise` that is fulfilled when the `EventEmitter` emits the given\nevent or that is rejected if the `EventEmitter` emits `'error'` while waiting.\nThe `Promise` will resolve with an array of all the arguments emitted to the\ngiven event.",
								"text": "This method is intentionally generic and works with the web platform [EventTarget](https://dom.spec.whatwg.org/#interface-eventtarget) interface, which has no special`'error'` event\nsemantics and does not listen to the `'error'` event.\n\n```js\nconst { once, EventEmitter } = require('events');\n\nasync function run() {\n  const ee = new EventEmitter();\n\n  process.nextTick(() => {\n    ee.emit('myevent', 42);\n  });\n\n  const [value] = await once(ee, 'myevent');\n  console.log(value);\n\n  const err = new Error('kaboom');\n  process.nextTick(() => {\n    ee.emit('error', err);\n  });\n\n  try {\n    await once(ee, 'myevent');\n  } catch (err) {\n    console.log('error happened', err);\n  }\n}\n\nrun();\n```\n\nThe special handling of the `'error'` event is only used when `events.once()`is used to wait for another event. If `events.once()` is used to wait for the\n'`error'` event itself, then it is treated as any other kind of event without\nspecial handling:\n\n```js\nconst { EventEmitter, once } = require('events');\n\nconst ee = new EventEmitter();\n\nonce(ee, 'error')\n  .then(([err]) => console.log('ok', err.message))\n  .catch((err) => console.log('error', err.message));\n\nee.emit('error', new Error('boom'));\n\n// Prints: ok boom\n```\n\nAn `AbortSignal` can be used to cancel waiting for the event:\n\n```js\nconst { EventEmitter, once } = require('events');\n\nconst ee = new EventEmitter();\nconst ac = new AbortController();\n\nasync function foo(emitter, event, signal) {\n  try {\n    await once(emitter, event, { signal });\n    console.log('event emitted!');\n  } catch (error) {\n    if (error.name === 'AbortError') {\n      console.error('Waiting for the event was canceled!');\n    } else {\n      console.error('There was an error', error.message);\n    }\n  }\n}\n\nfoo(ee, 'foo', ac.signal);\nac.abort(); // Abort waiting for the event\nee.emit('foo'); // Prints: Waiting for the event was canceled!\n```",
								"tags": [
									{
										"tag": "since",
										"text": "v11.13.0, v10.16.0\n"
									}
								]
							},
							"parameters": [
								{
									"id": 4,
									"name": "emitter",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isExternal": true
									},
									"type": {
										"type": "reference",
										"qualifiedName": "NodeEventTarget",
										"package": "@types/node",
										"name": "NodeEventTarget"
									}
								},
								{
									"id": 5,
									"name": "eventName",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isExternal": true
									},
									"type": {
										"type": "union",
										"types": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "symbol"
											}
										]
									}
								},
								{
									"id": 6,
									"name": "options",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isExternal": true,
										"isOptional": true
									},
									"type": {
										"type": "reference",
										"qualifiedName": "StaticEventEmitterOptions",
										"package": "@types/node",
										"name": "StaticEventEmitterOptions"
									}
								}
							],
							"type": {
								"type": "reference",
								"typeArguments": [
									{
										"type": "array",
										"elementType": {
											"type": "intrinsic",
											"name": "any"
										}
									}
								],
								"qualifiedName": "Promise",
								"package": "typedoc",
								"name": "Promise"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "EventEmitter.once"
							}
						},
						{
							"id": 7,
							"name": "once",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {
								"isExternal": true
							},
							"parameters": [
								{
									"id": 8,
									"name": "emitter",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isExternal": true
									},
									"type": {
										"type": "reference",
										"qualifiedName": "DOMEventTarget",
										"package": "@types/node",
										"name": "DOMEventTarget"
									}
								},
								{
									"id": 9,
									"name": "eventName",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isExternal": true
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 10,
									"name": "options",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isExternal": true,
										"isOptional": true
									},
									"type": {
										"type": "reference",
										"qualifiedName": "StaticEventEmitterOptions",
										"package": "@types/node",
										"name": "StaticEventEmitterOptions"
									}
								}
							],
							"type": {
								"type": "reference",
								"typeArguments": [
									{
										"type": "array",
										"elementType": {
											"type": "intrinsic",
											"name": "any"
										}
									}
								],
								"qualifiedName": "Promise",
								"package": "typedoc",
								"name": "Promise"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "EventEmitter.once"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"name": "EventEmitter.once"
					}
				},
				{
					"id": 24,
					"name": "setMaxListeners",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isStatic": true,
						"isExternal": true
					},
					"sources": [
						{
							"fileName": "node_modules/@types/node/events.d.ts",
							"line": 290,
							"character": 15
						}
					],
					"signatures": [
						{
							"id": 25,
							"name": "setMaxListeners",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {
								"isExternal": true
							},
							"comment": {
								"shortText": "By default `EventEmitter`s will print a warning if more than `10` listeners are\nadded for a particular event. This is a useful default that helps finding\nmemory leaks. The `EventEmitter.setMaxListeners()` method allows the default limit to be\nmodified (if eventTargets is empty) or modify the limit specified in every `EventTarget` | `EventEmitter` passed as arguments.\nThe value can be set to`Infinity` (or `0`) to indicate an unlimited number of listeners.",
								"text": "```js\nEventEmitter.setMaxListeners(20);\n// Equivalent to\nEventEmitter.defaultMaxListeners = 20;\n\nconst eventTarget = new EventTarget();\n// Only way to increase limit for `EventTarget` instances\n// as these doesn't expose its own `setMaxListeners` method\nEventEmitter.setMaxListeners(20, eventTarget);\n```",
								"tags": [
									{
										"tag": "since",
										"text": "v15.3.0, v14.17.0\n"
									}
								]
							},
							"parameters": [
								{
									"id": 26,
									"name": "n",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isExternal": true,
										"isOptional": true
									},
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								},
								{
									"id": 27,
									"name": "eventTargets",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isExternal": true,
										"isRest": true
									},
									"type": {
										"type": "array",
										"elementType": {
											"type": "union",
											"types": [
												{
													"type": "reference",
													"qualifiedName": "DOMEventTarget",
													"package": "@types/node",
													"name": "DOMEventTarget"
												},
												{
													"type": "reference",
													"qualifiedName": "global.NodeJS.EventEmitter",
													"package": "@types/node",
													"name": "EventEmitter"
												}
											]
										}
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "void"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "EventEmitter.setMaxListeners"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"name": "EventEmitter.setMaxListeners"
					}
				}
			],
			"groups": [
				{
					"title": "Constructors",
					"kind": 512,
					"children": [
						32
					]
				},
				{
					"title": "Properties",
					"kind": 1024,
					"children": [
						35,
						36,
						29,
						30,
						31,
						28
					]
				},
				{
					"title": "Methods",
					"kind": 2048,
					"children": [
						40,
						89,
						110,
						81,
						93,
						83,
						68,
						47,
						54,
						96,
						103,
						86,
						37,
						75,
						61,
						78,
						20,
						16,
						11,
						2,
						24
					]
				}
			],
			"sources": [
				{
					"fileName": "src/index.ts",
					"line": 5,
					"character": 6
				}
			],
			"extendedTypes": [
				{
					"type": "reference",
					"qualifiedName": "EventEmitter",
					"package": "@types/node",
					"name": "EventEmitter"
				}
			],
			"implementedTypes": [
				{
					"type": "reference",
					"id": 113,
					"name": "ISHClient"
				}
			]
		}
	],
	"groups": [
		{
			"title": "Namespaces",
			"kind": 4,
			"children": [
				112
			]
		},
		{
			"title": "Classes",
			"kind": 128,
			"children": [
				1
			]
		}
	],
	"sources": [
		{
			"fileName": "src/exports.ts",
			"line": 1,
			"character": 0
		}
	]
}